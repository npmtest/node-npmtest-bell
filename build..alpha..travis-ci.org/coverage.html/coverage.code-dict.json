{"/home/travis/build/npmtest/node-npmtest-bell/test.js":"/* istanbul instrument in package npmtest_bell */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bell/lib.npmtest_bell.js":"/* istanbul instrument in package npmtest_bell */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_bell = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_bell = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-bell/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-bell && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_bell */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_bell\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_bell.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_bell.rollup.js'] =\n            local.assetsDict['/assets.npmtest_bell.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_bell.__dirname + '/lib.npmtest_bell.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/index.js":"'use strict';\n\n// Load modules\n\nconst Hoek = require('hoek');\nconst Joi = require('joi');\nconst OAuth = require('./oauth');\nconst Providers = require('./providers');\n\n\n// Declare internals\n\nconst internals = {\n    simulate: false,\n    flexBoolean: Joi.boolean().truthy('true', 'yes', 1, '1').falsy('false', 'no', 0, '0')\n};\n\n\n// Utilities\n\nexports.providers = Providers;\nexports.oauth = OAuth;\n\n\n// Plugin\n\nexports.register = function (server, options, next) {\n\n    server.auth.scheme('bell', internals.implementation);\n    server.expose('oauth', OAuth);\n    next();\n};\n\nexports.register.attributes = {\n    pkg: require('../package.json')\n};\n\n\ninternals.schema = Joi.object({\n    provider: Joi.object({\n        name: Joi.string().optional().default('custom'),\n        protocol: Joi.string().valid('oauth', 'oauth2'),\n        temporary: Joi.string().when('protocol', { is: 'oauth', then: Joi.required(), otherwise: Joi.forbidden() }),\n        signatureMethod: Joi.string().valid('HMAC-SHA1', 'RSA-SHA1').when('protocol', { is: 'oauth', then: Joi.default('HMAC-SHA1'), otherwise: Joi.forbidden() }),\n        auth: Joi.string().required(),\n        useParamsAuth: internals.flexBoolean.default(false).when('protocol', { is: 'oauth2', then: Joi.optional(), otherwise: Joi.forbidden() }),\n        token: Joi.string().required(),\n        headers: Joi.object(),\n        profile: Joi.func(),\n        scope: Joi.alternatives().try(\n            Joi.array().items(Joi.string()),\n            Joi.func()\n        ).when('protocol', { is: 'oauth2', otherwise: Joi.forbidden() }),\n        scopeSeparator: Joi.string().when('protocol', { is: 'oauth2', otherwise: Joi.forbidden() }),\n        version: Joi.string()\n    }).required(),\n    password: Joi.string().required(),\n    clientId: Joi.string().required(),\n    clientSecret: Joi.string().required().allow(''),\n    cookie: Joi.string(),\n    isSecure: internals.flexBoolean,\n    isHttpOnly: internals.flexBoolean,\n    ttl: Joi.number(),\n    domain: Joi.string().allow(null),\n    providerParams: Joi.alternatives().try(Joi.object(), Joi.func()),\n    allowRuntimeProviderParams: internals.flexBoolean.default(false),\n    scope: Joi.alternatives().try(\n        Joi.array().items(Joi.string()),\n        Joi.func()\n    ).when('provider.protocol', { is: 'oauth2', otherwise: Joi.forbidden() }),\n    name: Joi.string().required(),\n    config: Joi.object(),\n    profileParams: Joi.object(),\n    skipProfile: internals.flexBoolean.optional().default(false),\n    forceHttps: internals.flexBoolean.optional().default(false),\n    location: Joi.string().optional().default(false),\n    runtimeStateCallback: Joi.func().optional()\n});\n\n\ninternals.implementation = function (server, options) {\n\n    let settings = Hoek.cloneWithShallow(options, 'provider');      // Options can be reused\n\n    // Lookup provider\n\n    if (typeof settings.provider === 'object') {\n        settings.name = settings.provider.name || 'custom';\n    }\n    else {\n        settings.name = settings.provider;\n        settings.provider = Providers[settings.provider].call(null, settings.config);\n    }\n\n    const results = Joi.validate(settings, internals.schema);\n    Hoek.assert(!results.error, results.error);\n\n    // Passed validation, use Joi converted settings\n    settings = results.value;\n\n    // Setup cookie for managing temporary authorization state\n\n    const cookieOptions = {\n        encoding: 'iron',\n        path: '/',\n        password: settings.password,\n        isSecure: settings.isSecure !== false,                  // Defaults to true\n        isHttpOnly: settings.isHttpOnly !== false,              // Defaults to true\n        isSameSite: false,\n        ttl: settings.ttl,\n        domain: settings.domain,\n        ignoreErrors: true,\n        clearInvalid: true\n    };\n\n    settings.cookie = settings.cookie || 'bell-' + settings.name;\n    try {\n        server.state(settings.cookie, cookieOptions);\n    }\n    catch (exception) {\n        /* $lab:coverage:off$ */\n        // This is to support Hapi 13.5.0 so that adding isSameSite: false option is not a breaking change\n        if (exception.message.indexOf('isSameSite') === -1) {\n            throw exception;\n        }\n        delete cookieOptions.isSameSite;\n        server.state(settings.cookie, cookieOptions);\n        /* $lab:coverage:on$ */\n    }\n\n    if (internals.simulate) {\n        return internals.simulated(settings);\n    }\n\n    return { authenticate: (settings.provider.protocol === 'oauth' ? OAuth.v1 : OAuth.v2)(settings) };\n};\n\n\nexports.simulate = function (credentialsFunc) {\n\n    internals.simulate = credentialsFunc;\n};\n\n\ninternals.simulated = function (settings) {\n\n    const name = settings.name;\n    const protocol = settings.provider.protocol;\n\n    return {\n        authenticate: function (request, reply) {\n\n            internals.simulate(request, (err, result) => {\n\n                if (err) {\n                    return reply(err);\n                }\n\n                const credentials = {\n                    provider: name,\n                    token: 'oauth_token',\n                    query: request.query\n                };\n\n                if (protocol === 'oauth') {\n                    credentials.secret = 'token_secret';\n                }\n                else {\n                    credentials.refreshToken = 'refresh_token';\n                    credentials.expiresIn = 3600;\n                }\n\n                return reply.continue({ credentials: Hoek.applyToDefaults(credentials, result) });\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/oauth.js":"'use strict';\n\n// Load modules\n\nconst Querystring = require('querystring');\nconst Url = require('url');\nconst Boom = require('boom');\nconst Cryptiles = require('cryptiles');\nconst Crypto = require('crypto');\nconst Hoek = require('hoek');\nconst Wreck = require('wreck');\n\n\n// Declare internals\n\nconst internals = {\n    nonceLength: 22\n};\n\n\nexports.v1 = function (settings) {\n\n    const client = new internals.Client(settings);\n\n    return function (request, reply) {\n\n        const cookie = settings.cookie;\n        const name = settings.name;\n        const query = request.query;\n        const protocol = internals.getProtocol(request, settings);\n\n        // Bail if the upstream service returns an error\n\n        if (query.error === 'access_denied' ||\n            query.denied) {\n\n            return reply(Boom.internal('Application rejected'));\n        }\n\n        // If not https but cookie is secure, throw error\n\n        if (protocol !== 'https' && settings.isSecure) {\n            return reply(Boom.internal('Invalid setting  - isSecure must be set to false for non-https server'));\n        }\n\n        // Sign-in Initialization\n\n        if (!request.query.oauth_token) {\n\n            // Obtain temporary OAuth credentials\n\n            const oauth_callback = internals.location(request, protocol, settings.location);\n            return client.temporary(oauth_callback, (err, payload) => {\n\n                if (err) {\n                    return reply(err);\n                }\n\n                const state = {\n                    token: payload.oauth_token,\n                    secret: payload.oauth_token_secret,\n                    query: request.query\n                };\n\n                reply.state(cookie, state);\n\n                const authQuery = internals.resolveProviderParams(request, settings.providerParams);\n                authQuery.oauth_token = payload.oauth_token;\n\n                if (settings.allowRuntimeProviderParams ) {\n                    Hoek.merge(authQuery, request.query);\n                }\n\n                return reply.redirect(settings.provider.auth + '?' + internals.queryString(authQuery));\n            });\n        }\n\n        // Authorization callback\n\n        if (!request.query.oauth_verifier) {\n            return reply(Boom.internal('Missing verifier parameter in ' + name + ' authorization response'));\n        }\n\n        const state = request.state[cookie];\n        if (!state) {\n            return internals.refreshRedirect(request, name, protocol, settings, reply);\n        }\n\n        reply.unstate(cookie);\n\n        if (request.query.oauth_token !== state.token) {\n            return reply(Boom.internal(name + ' authorized request token mismatch'));\n        }\n\n        // Obtain token OAuth credentials\n\n        client.token(state.token, request.query.oauth_verifier, state.secret, (err, payload) => {\n\n            if (err) {\n                return reply(err);\n            }\n\n            const credentials = {\n                provider: name,\n                token: payload.oauth_token,\n                secret: payload.oauth_token_secret,\n                query: state.query\n            };\n\n            if (!settings.provider.profile || settings.skipProfile) {\n                return reply.continue({ credentials });\n            }\n\n            // Obtain user profile\n\n            const get = function (uri, params, callback) {\n\n                if (settings.profileParams) {\n                    Hoek.merge(params, settings.profileParams);\n                }\n\n                return client.resource('get', uri, params, { token: payload.oauth_token, secret: payload.oauth_token_secret }, (err, response) => {\n\n                    if (err) {\n                        return reply(err);\n                    }\n\n                    callback(response);\n                });\n            };\n\n            settings.provider.profile.call(settings, credentials, payload, get, () => {\n\n                return reply.continue({ credentials });\n            });\n        });\n    };\n};\n\n\nexports.v2 = function (settings) {\n\n    return function (request, reply) {\n\n        const cookie = settings.cookie;\n        const name = settings.name;\n        const protocol = internals.getProtocol(request, settings);\n        let query;\n        let state;\n\n        // Bail if the upstream service returns an error\n        if (request.query.error === 'access_denied' || request.query.denied) {\n            return reply(Boom.internal(`App rejected: ${request.query.error_description || request.query.denied || 'No information provided'}`));\n        }\n\n        // If not https but cookie is secure, throw error\n        if (protocol !== 'https' && settings.isSecure) {\n            return reply(Boom.internal('Invalid setting  - isSecure must be set to false for non-https server'));\n        }\n\n        // Sign-in Initialization\n\n        if (!request.query.code) {\n            const nonce = Cryptiles.randomString(internals.nonceLength);\n            query = internals.resolveProviderParams(request, settings.providerParams);\n\n            if (settings.allowRuntimeProviderParams ) {\n                Hoek.merge(query, request.query);\n            }\n\n            query.client_id = settings.clientId;\n            query.response_type = 'code';\n            query.redirect_uri = internals.location(request, protocol, settings.location);\n            query.state = nonce;\n\n            if (settings.runtimeStateCallback) {\n                const runtimeState = settings.runtimeStateCallback(request);\n                if (runtimeState) {\n                    query.state += runtimeState;\n                }\n            }\n\n            let scope = settings.scope || settings.provider.scope;\n            if (typeof scope === 'function') {\n                scope = scope(request);\n            }\n            if (scope) {\n                query.scope = scope.join(settings.provider.scopeSeparator || ' ');\n            }\n\n            state = {\n                nonce,\n                query: request.query\n            };\n\n            reply.state(cookie, state);\n            return reply.redirect(settings.provider.auth + '?' + internals.queryString(query));\n        }\n\n        // Authorization callback\n\n        state = request.state[cookie];\n        if (!state) {\n            return internals.refreshRedirect(request, name, protocol, settings, reply);\n        }\n\n        reply.unstate(cookie);\n\n        const requestState = request.query.state || '';\n        if (state.nonce !== requestState.substr(0, Math.min(requestState.length, internals.nonceLength))) {\n            return reply(Boom.internal('Incorrect ' + name + ' state parameter'));\n        }\n\n        query = {\n            grant_type: 'authorization_code',\n            code: request.query.code,\n            redirect_uri: internals.location(request, protocol, settings.location)\n        };\n\n        if (settings.provider.useParamsAuth) {\n            query.client_id = settings.clientId;\n            query.client_secret = settings.clientSecret;\n        }\n\n        const requestOptions = {\n            payload: internals.queryString(query),\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            }\n        };\n\n        if (!settings.provider.useParamsAuth) {\n            requestOptions.headers.Authorization = 'Basic ' + (new Buffer(settings.clientId + ':' + settings.clientSecret, 'utf8')).toString('base64');\n        }\n\n        if (settings.provider.headers) {\n            Hoek.merge(requestOptions.headers, settings.provider.headers);\n        }\n\n        // Obtain token\n\n        Wreck.post(settings.provider.token, requestOptions, (err, tokenRes, payload) => {\n\n            if (err ||\n                tokenRes.statusCode < 200 ||\n                tokenRes.statusCode > 299) {\n\n                return reply(Boom.internal('Failed obtaining ' + name + ' access token', err || payload));\n            }\n\n            payload = internals.parse(payload);\n            if (payload instanceof Error) {\n                return reply(Boom.internal('Received invalid payload from ' + name + ' access token endpoint', payload));\n            }\n\n            const credentials = {\n                provider: name,\n                token: payload.access_token,\n                refreshToken: payload.refresh_token,\n                expiresIn: payload.expires_in,\n                query: state.query\n            };\n\n            if (!settings.provider.profile || settings.skipProfile) {\n                return reply.continue({ credentials, artifacts: payload });\n            }\n\n            // Obtain user profile\n\n            const get = function (uri, params, callback) {\n\n                const getOptions = {\n                    headers: {\n                        Authorization: 'Bearer ' + payload.access_token\n                    }\n                };\n\n                if (settings.profileParams) {\n                    Hoek.merge(params, settings.profileParams);\n                }\n\n                if (settings.provider.headers) {\n                    Hoek.merge(getOptions.headers, settings.provider.headers);\n                }\n\n                const getQuery = (params ? '?' + internals.queryString(params) : '');\n                Wreck.get(uri + getQuery, getOptions, (err, res, response) => {\n\n                    if (err ||\n                        res.statusCode !== 200) {\n\n                        return reply(Boom.internal('Failed obtaining ' + name + ' user profile', err || response));\n                    }\n\n                    response = internals.parse(response);\n                    if (response instanceof Error) {\n                        return reply(Boom.internal('Received invalid payload from ' + name + ' user profile', response));\n                    }\n\n                    return callback(response);\n                });\n            };\n\n            settings.provider.profile.call(settings, credentials, payload, get, () => {\n\n                return reply.continue({ credentials, artifacts: payload });\n            });\n        });\n    };\n};\n\n\ninternals.refreshRedirect = function (request, name, protocol, settings, reply) {\n\n    // Workaround for some browsers where due to CORS and the redirection method, the state\n    // cookie is not included with the request unless the request comes directly from the same origin.\n\n    if (request.query.refresh) {\n        return reply(Boom.internal('Missing ' + name + ' request token cookie'));\n    }\n    const refreshQuery = Object.assign({}, request.url.query, { refresh: 1 });\n    const refreshUrl = internals.location(request, protocol, settings.location) + '?' + internals.queryString(refreshQuery);\n    return reply(`<html><head><meta http-equiv=\"refresh\" content=\"0;URL='${refreshUrl}'\"></head><body></body></html>`);\n};\n\n\nexports.Client = internals.Client = function (options) {\n\n    this.provider = options.name;\n    this.settings = {\n        temporary: internals.Client.baseUri(options.provider.temporary),\n        token: internals.Client.baseUri(options.provider.token),\n        clientId: options.clientId,\n        clientSecret: options.provider.signatureMethod === 'RSA-SHA1' ? options.clientSecret : internals.encode(options.clientSecret || '') + '&',\n        signatureMethod: options.provider.signatureMethod\n    };\n};\n\n\ninternals.Client.prototype.temporary = function (oauth_callback, callback) {\n\n    // Temporary Credentials (2.1)\n\n    const oauth = {\n        oauth_callback\n    };\n\n    return this._request('post', this.settings.temporary, null, oauth, { desc: 'temporary credentials' }, callback);\n};\n\n\ninternals.Client.prototype.token = function (oauthToken, oauthVerifier, tokenSecret, callback) {\n\n    // Token Credentials (2.3)\n\n    const oauth = {\n        oauth_token: oauthToken,\n        oauth_verifier: oauthVerifier\n    };\n\n    return this._request('post', this.settings.token, null, oauth, { secret: tokenSecret, desc: 'token credentials' }, callback);\n};\n\n\ninternals.Client.prototype.resource = function (method, uri, params, options, callback) {\n\n    // Making Requests (3.1)\n\n    const oauth = {\n        oauth_token: options.token\n    };\n\n    return this._request(method, uri, params, oauth, options, callback);\n};\n\n\ninternals.Client.prototype._request = function (method, uri, params, oauth, options, callback) {\n\n    method = method.toLowerCase();\n\n    // Prepare generic OAuth parameters\n\n    oauth.oauth_nonce = Cryptiles.randomString(internals.nonceLength);\n    oauth.oauth_timestamp = Math.floor(Date.now() / 1000).toString();\n    oauth.oauth_consumer_key = this.settings.clientId;\n    oauth.oauth_signature_method = this.settings.signatureMethod;\n    oauth.oauth_signature = this.signature(method, uri, params, oauth, options.secret);\n\n    // Calculate OAuth header\n\n    const requestOptions = {\n        headers: {\n            Authorization: internals.Client.header(oauth)\n        }\n    };\n\n    if (params) {\n        const paramsString = internals.queryString(params);\n        if (method === 'get') {\n            uri += '?' + paramsString;\n        }\n        else {\n            requestOptions.payload = paramsString;\n            requestOptions.headers['content-type'] = 'application/x-www-form-urlencoded';\n        }\n    }\n\n    if (options.stream) {\n        return Wreck.request(method, uri, requestOptions, callback);\n    }\n\n    const desc = (options.desc || 'resource');\n    return Wreck[method](uri, requestOptions, (err, res, payload) => {\n\n        if (err) {\n            return callback(Boom.internal('Failed obtaining ' + this.provider + ' ' + desc, err));\n        }\n\n        if (res.statusCode !== 200) {\n            return callback(Boom.internal('Failed obtaining ' + this.provider + ' ' + desc, payload), payload, res.statusCode);\n        }\n\n        if (!options.raw) {\n            payload = internals.parse(payload);\n            if (payload instanceof Error) {\n                return callback(Boom.internal('Received invalid payload from ' + this.provider + ' ' + desc + ' endpoint', payload), payload, res.statusCode);\n            }\n        }\n\n        return callback(null, payload, res.statusCode);\n    });\n};\n\n\ninternals.Client.header = function (oauth) {\n\n    // Authorization Header (3.5.1)\n\n    let header = 'OAuth ';\n    const names = Object.keys(oauth);\n    for (let i = 0; i < names.length; ++i) {\n        const name = names[i];\n        header += (i ? ', ' : '') + name + '=\"' + internals.encode(oauth[name]) + '\"';\n    }\n\n    return header;\n};\n\n\ninternals.Client.baseUri = function (uri) {\n\n    // Base String URI (3.4.1.2)\n\n    const resource = Url.parse(uri, true);\n\n    const protocol = resource.protocol.toLowerCase();\n    const isDefaultPort = resource.port && ((protocol === 'http:' && resource.port === '80') || (protocol === 'https:' && resource.port === '443'));\n    return protocol + '//' + resource.hostname.toLowerCase() + (isDefaultPort || !resource.port ? '' : ':' + resource.port) + resource.pathname;\n};\n\n\ninternals.Client.prototype.signature = function (method, baseUri, params, oauth, tokenSecret) {\n\n    // Parameters Normalization (3.4.1.3.2)\n\n    const normalized = [];\n    const normalize = function (source) {\n\n        const names = Object.keys(source);\n        for (let i = 0; i < names.length; ++i) {\n            const name = names[i];\n            const value = source[name];\n\n            const encodedName = internals.encode(name);\n            if (Array.isArray(value)) {\n                for (let j = 0; j < value.length; ++j) {\n                    normalized.push([encodedName, internals.encode(value[j])]);\n                }\n            }\n            else {\n                normalized.push([encodedName, internals.encode(value)]);\n            }\n        }\n    };\n\n    if (params) {\n        normalize(params);\n    }\n\n    normalize(oauth);\n\n    normalized.sort((a, b) => {\n\n        return (a[0] < b[0] ? -1\n                            : (a[0] > b[0] ? 1\n                                           : (a[1] < b[1] ? -1\n                                                          : (a[1] > b[1] ? 1 : 0))));\n    });\n\n    let normalizedParam = '';\n    for (let i = 0; i < normalized.length; ++i) {\n        normalizedParam += (i ? '&' : '') + normalized[i][0] + '=' + normalized[i][1];\n    }\n\n    // String Construction (3.4.1.1)\n\n    const baseString = internals.encode(method.toUpperCase()) + '&' +\n                       internals.encode(baseUri) + '&' +\n                       internals.encode(normalizedParam);\n\n    if (oauth.oauth_signature_method === 'RSA-SHA1') { // RSA-SHA1 (3.4.3)\n        return Crypto.createSign('sha1').update(baseString).sign(this.settings.clientSecret, 'base64');\n    }\n    // HMAC-SHA1 (3.4.2)\n    const key = tokenSecret ? (this.settings.clientSecret + internals.encode(tokenSecret)) : this.settings.clientSecret;\n    return Crypto.createHmac('sha1', key).update(baseString).digest('base64');\n};\n\n\ninternals.encodeLookup = function () {\n\n    const lookup = {};\n    for (let i = 0; i < 128; ++i) {\n        if ((i >= 48 && i <= 57) ||     // 09\n            (i >= 65 && i <= 90) ||     // AZ\n            (i >= 97 && i <= 122) ||    // az\n            i === 45 ||                 // -\n            i === 95 ||                 // _\n            i === 46 ||                 // .\n            i === 126) {                // ~\n            lookup[i] = String.fromCharCode(i);\n        }\n        else {\n            lookup[i] = '%' + i.toString(16).toUpperCase();\n        }\n    }\n\n    return lookup;\n}();\n\n\ninternals.encode = function (string) {\n\n    if (!string) {\n        return '';\n    }\n\n    // Percent Encoding (3.6)\n\n    let encoded = '';\n    for (let i = 0; i < string.length; ++i) {\n        encoded += internals.encodeLookup[string.charCodeAt(i)];\n    }\n\n    return encoded;\n};\n\n\ninternals.parse = function (payload) {\n\n    payload = Buffer.isBuffer(payload) ? payload.toString() : payload;\n    if (payload.trim()[0] === '{') {\n        try {\n            return JSON.parse(payload);\n        }\n        catch (err) {\n            return err;\n        }\n    }\n\n    return Querystring.parse(payload);\n};\n\n\ninternals.location = function (request, protocol, location) {\n\n    if (location) {\n        return location + request.path;\n    }\n\n    return protocol + '://' + request.info.host + request.path;\n};\n\n\n// Provide own QS implementation for cross node version support\n\ninternals.encodePrimitive = function (value) {\n\n    const type = typeof value;\n    if (type === 'boolean') {\n        return value ? 'true' : 'false';\n    }\n\n    if (type === 'number') {\n        return isFinite(value) ? value.toString() : '';\n    }\n\n    return internals.encode(value);\n};\n\n\ninternals.Client.queryString = internals.queryString = function (params) {\n\n    const keys = Object.keys(params);\n    const fields = [];\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        const value = params[key];\n        const ks = internals.encodePrimitive(key) + '=';\n\n        if (Array.isArray(value)) {\n            for (let j = 0; j < value.length; ++j) {\n                fields.push(ks + internals.encodePrimitive(value[j]));\n            }\n        }\n        else {\n            fields.push(ks + internals.encodePrimitive(value));\n        }\n    }\n\n    return fields.join('&');\n};\n\ninternals.getProtocol = (request, settings) => {\n\n    return settings.forceHttps ? 'https' : (\n        settings.location &&\n        settings.location.indexOf('https:') !== -1\n    ) ? 'https' : request.connection.info.protocol;\n};\n\ninternals.resolveProviderParams = (request, params) => {\n\n    const obj = typeof params === 'function' ? params(request) : params;\n    return obj ? Hoek.clone(obj) : {};\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/index.js":"'use strict';\n\nexports = module.exports = {\n    arcgisonline: require('./arcgisonline'),\n    auth0: require('./auth0'),\n    azuread: require('./azuread'),\n    bitbucket: require('./bitbucket'),\n    discord: require('./discord'),\n    dropbox: require('./dropbox'),\n    facebook: require('./facebook'),\n    fitbit: require('./fitbit'),\n    foursquare: require('./foursquare'),\n    github: require('./github'),\n    gitlab: require('./gitlab'),\n    google: require('./google'),\n    googleplus: require('./googleplus'),\n    instagram: require('./instagram'),\n    linkedin: require('./linkedin'),\n    live: require('./live'),\n    medium: require('./medium'),\n    meetup: require('./meetup'),\n    nest: require('./nest'),\n    office365: require('./office365'),\n    okta: require('./okta'),\n    phabricator: require('./phabricator'),\n    pingfed: require('./pingfed'),\n    pinterest: require('./pinterest'),\n    reddit: require('./reddit'),\n    salesforce: require('./salesforce'),\n    slack: require('./slack'),\n    spotify: require('./spotify'),\n    tumblr: require('./tumblr'),\n    twitch: require('./twitch'),\n    twitter: require('./twitter'),\n    vk: require('./vk'),\n    wordpress: require('./wordpress'),\n    yahoo: require('./yahoo')\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/arcgisonline.js":"'use strict';\n\nexports = module.exports = function (options) {\n\n    return {\n        protocol: 'oauth2',\n        useParamsAuth: true,\n        auth: 'https://www.arcgis.com/sharing/rest/oauth2/authorize',\n        token: 'https://www.arcgis.com/sharing/rest/oauth2/token',\n        scope: [],\n        profile: function (credentials, params, get, callback) {\n\n            const query = {\n                token: params.access_token,\n                f: 'json'\n            };\n\n            get('https://www.arcgis.com/sharing/rest/community/self', query, (profile) => {\n\n                credentials.profile = {\n                    provider: 'arcgisonline',\n                    orgId: profile.orgId,\n                    username: profile.username,\n                    displayName: profile.fullName,\n                    name: {\n                        first: profile.firstName,\n                        last: profile.lastName\n                    },\n                    email: profile.email,\n                    role: profile.role,\n                    raw: profile\n                };\n\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/auth0.js":"'use strict';\n\nconst Joi = require('joi');\nconst Hoek = require('hoek');\n\nexports = module.exports = function (options) {\n\n    const validated = Joi.validate(options, Joi.object({\n        domain: Joi.string().hostname().required()\n    }));\n    Hoek.assert(!validated.error, validated.error);\n    const settings = validated.value;\n    const auth0BaseUrl = `https://${settings.domain}`;\n    return {\n        protocol: 'oauth2',\n        useParamsAuth: true,\n        auth: `${auth0BaseUrl}/authorize`,\n        token: `${auth0BaseUrl}/oauth/token`,\n        profile: function (credentials, params, get, callback) {\n\n            get(`${auth0BaseUrl}/userinfo`, null, (profile) => {\n                // https://auth0.com/docs/user-profile/normalized\n                credentials.profile = {\n                    id: profile.user_id,\n                    email: profile.email,\n                    displayName: profile.name,\n                    name: {\n                        first: profile.given_name,\n                        last: profile.family_name\n                    },\n                    raw: profile\n                };\n                callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/azuread.js":"'use strict';\n\nexports = module.exports = function (options) {\n\n    options = options || {};\n    const tenantId = options.tenant || 'common';\n\n    return {\n        protocol: 'oauth2',\n        useParamsAuth: true,\n        auth: 'https://login.microsoftonline.com/' + tenantId + '/oauth2/authorize',\n        token: 'https://login.microsoftonline.com/' + tenantId + '/oauth2/token',\n        scope: ['openid','offline_access', 'profile'],\n        profile: function (credentials, params, get, reply) {\n\n            get('https://login.microsoftonline.com/' + tenantId + '/openid/userinfo', null, (profile) => {\n\n                credentials.profile = {\n                    id: profile.oid,\n                    displayName: profile.name,\n                    email: profile.upn || profile.email,\n                    raw: profile\n                };\n                return reply();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/bitbucket.js":"'use strict';\n\nexports = module.exports = function () {\n\n    return {\n        protocol: 'oauth2',\n        auth: 'https://bitbucket.org/site/oauth2/authorize',\n        token: 'https://bitbucket.org/site/oauth2/access_token',\n        profile: function (credentials, params, get, callback) {\n\n            get('https://api.bitbucket.org/2.0/user', null, (profile) => {\n\n                credentials.profile = {\n                    id: profile.uuid,\n                    username: profile.username,\n                    displayName: profile.display_name,\n                    raw: profile\n                };\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/discord.js":"'use strict';\n\nexports = module.exports = function () {\n\n    return {\n        protocol: 'oauth2',\n        auth: 'https://discordapp.com/api/oauth2/authorize',\n        token: 'https://discordapp.com/api/oauth2/token',\n        scope: ['email', 'identify'], // see https://discordapp.com/developers/docs/topics/oauth2#scopes\n        profile: function (credentials, params, get, callback) {\n\n            get('https://discordapp.com/api/users/@me', null, (profile) => {\n\n                credentials.profile = {\n                    id: profile.id,\n                    discriminator: profile.discriminator,\n                    username: profile.username,\n                    email: profile.email,\n                    mfa_enabled: profile.mfa_enabled,\n                    verified: profile.verified,\n                    avatar: {\n                        id: profile.avatar,\n                        url: 'https://discordapp.com/api/users/' + profile.id + '/avatars/' + profile.avatar + '.jpg'\n                    },\n                    raw: profile\n                };\n\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/dropbox.js":"'use strict';\n\nexports = module.exports = function (options) {\n\n    return {\n        protocol: 'oauth2',\n        useParamsAuth: true,\n        auth: 'https://www.dropbox.com/1/oauth2/authorize',\n        token: 'https://api.dropbox.com/1/oauth2/token',\n        profile: function (credentials, params, get, callback) {\n\n            get('https://api.dropbox.com/1/account/info', null, (profile) => {\n\n                credentials.profile = profile;\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/facebook.js":"'use strict';\n\n// Load modules\n\nconst Crypto = require('crypto');\n\n\nexports = module.exports = function (options) {\n\n    return {\n        protocol: 'oauth2',\n        useParamsAuth: true,\n        auth: 'https://www.facebook.com/v2.3/dialog/oauth',\n        token: 'https://graph.facebook.com/v2.3/oauth/access_token',\n        scope: ['email'],\n        scopeSeparator: ',',\n        profile: function (credentials, params, get, callback) {\n\n            const query = {\n                appsecret_proof: Crypto.createHmac('sha256', this.clientSecret).update(credentials.token).digest('hex'),\n                fields: 'id,name,email,first_name,last_name,middle_name,gender,link,locale,timezone,updated_time,verified'\n            };\n\n            get('https://graph.facebook.com/v2.3/me', query, (profile) => {\n\n                credentials.profile = {\n                    id: profile.id,\n                    username: profile.username,\n                    displayName: profile.name,\n                    name: {\n                        first: profile.first_name,\n                        last: profile.last_name,\n                        middle: profile.middle_name\n                    },\n                    email: profile.email,\n                    raw: profile\n                };\n\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/fitbit.js":"'use strict';\n\nexports = module.exports = function (options) {\n\n    return {\n        protocol: 'oauth2',\n        useParamsAuth: false,\n        auth: 'https://www.fitbit.com/oauth2/authorize',\n        token: 'https://api.fitbit.com/oauth2/token',\n        scope: ['activity','profile'], //see https://dev.fitbit.com/docs/oauth2/#scope\n        profile: function (credentials, params, get, callback) {\n\n            get('https://api.fitbit.com/1/user/-/profile.json', null, (profile) => {\n\n                credentials.profile = {\n                    id: profile.user.encodedId,\n                    displayName: profile.user.displayName,\n                    name: profile.user.fullName\n                };\n\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/foursquare.js":"'use strict';\n\nexports = module.exports = function (options) {\n\n    return {\n        protocol: 'oauth2',\n        useParamsAuth: true,\n        auth: 'https://foursquare.com/oauth2/authenticate',\n        token: 'https://foursquare.com/oauth2/access_token',\n        profile: function (credentials, params, get, callback) {\n\n            const query = {\n                v: '20140701',\n                oauth_token: credentials.token\n            };\n\n            get('https://api.foursquare.com/v2/users/self', query, (data) => {\n\n                const profile = data.response.user;\n\n                credentials.profile = {\n                    id: profile.id,\n                    displayName: profile.firstName + ' ' + profile.lastName,\n                    name: {\n                        first: profile.firstName,\n                        last: profile.lastName\n                    },\n                    email: profile.contact.email,\n                    raw: profile\n                };\n\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/github.js":"'use strict';\n\nexports = module.exports = function (options) {\n\n    options = options || {};\n\n    const uri = options.uri || 'https://github.com';\n    const user = options.uri ? options.uri + '/api/v3/user' : 'https://api.github.com/user';\n\n    return {\n        protocol: 'oauth2',\n        useParamsAuth: true,\n        auth: uri + '/login/oauth/authorize',\n        token: uri + '/login/oauth/access_token',\n        scope: ['user:email'],\n        scopeSeparator: ',',\n        headers: { 'User-Agent': 'hapi-bell-github' },\n        profile: function (credentials, params, get, callback) {\n\n            get(user, null, (profile) => {\n\n                credentials.profile = {\n                    id: profile.id,\n                    username: profile.login,\n                    displayName: profile.name,\n                    email: profile.email,\n                    raw: profile\n                };\n\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/gitlab.js":"'use strict';\n\nexports = module.exports = function (options) {\n\n    options = options || {};\n\n    const uri = options.uri || 'https://gitlab.com';\n    const user = uri + '/api/v3/user';\n\n    return {\n        protocol: 'oauth2',\n        auth: uri + '/oauth/authorize',\n        token: uri + '/oauth/token',\n        profile: function (credentials, params, get, callback) {\n\n            get(user, null, (profile) => {\n\n                credentials.profile = profile;\n\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/google.js":"'use strict';\n\nexports = module.exports = function (options) {\n\n    return {\n        protocol: 'oauth2',\n        useParamsAuth: true,\n        auth: 'https://accounts.google.com/o/oauth2/v2/auth',\n        token: 'https://www.googleapis.com/oauth2/v4/token',\n        scope: ['profile', 'email'],\n        profile: function (credentials, params, get, callback) {\n\n            get('https://www.googleapis.com/oauth2/v3/userinfo', null, (profile) => {\n\n                credentials.profile = {\n                    id: profile.sub,\n                    displayName: profile.name,\n                    name: {\n                        given_name: profile.given_name,\n                        family_name: profile.family_name\n                    },\n                    email: profile.email,\n                    raw: profile\n                };\n\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/googleplus.js":"'use strict';\n\nexports = module.exports = function (options) {\n\n    return {\n        protocol: 'oauth2',\n        useParamsAuth: true,\n        auth: 'https://accounts.google.com/o/oauth2/v2/auth',\n        token: 'https://www.googleapis.com/oauth2/v4/token',\n        scope: ['profile', 'email'],\n        profile: function (credentials, params, get, callback) {\n\n            get('https://www.googleapis.com/plus/v1/people/me', null, (profile) => {\n\n                credentials.profile = {\n                    id: profile.id,\n                    displayName: profile.displayName,\n                    name: profile.name,\n                    emails: profile.emails,\n                    raw: profile\n                };\n\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/instagram.js":"'use strict';\n\nexports = module.exports = function (options) {\n\n    options = options || {};\n\n    return {\n        protocol: 'oauth2',\n        useParamsAuth: true,\n        auth: 'https://api.instagram.com/oauth/authorize',\n        token: 'https://api.instagram.com/oauth/access_token',\n        scope: ['basic'],\n        scopeSeparator: ' ',\n        profile: function (credentials, params, get, callback) {\n\n            credentials.profile = {\n                id: params.user.id,\n                username: params.user.username,\n                displayName: params.user.full_name,\n                raw: params.user\n            };\n\n            if (options.extendedProfile === false) { // Defaults to true\n                return callback();\n            }\n\n            get('https://api.instagram.com/v1/users/self', { access_token: credentials.token }, (profile) => {\n\n                credentials.profile.raw = profile.data;\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/linkedin.js":"'use strict';\n\n// Load modules\n\nconst Crypto = require('crypto');\n\n\nexports = module.exports = function (options) {\n\n    return {\n        protocol: 'oauth2',\n        useParamsAuth: true,\n        auth: 'https://www.linkedin.com/uas/oauth2/authorization',\n        token: 'https://www.linkedin.com/uas/oauth2/accessToken',\n        scope: ['r_basicprofile', 'r_emailaddress'],\n        scopeSeparator: ',',\n        profile: function (credentials, params, get, callback) {\n\n            const query = {\n                format: 'json',\n                appsecret_proof: Crypto.createHmac('sha256', this.clientSecret).update(credentials.token).digest('hex')\n            };\n\n            let fields = '';\n            if (this.providerParams && this.providerParams.fields) {\n                fields = this.providerParams.fields;\n            }\n\n            get('https://api.linkedin.com/v1/people/~' + fields, query, (profile) => {\n\n                credentials.profile = {\n                    id: profile.id,\n                    name: {\n                        first: profile.firstName,\n                        last: profile.lastName\n                    },\n                    email: profile.emailAddress,\n                    headline: profile.headline,\n                    raw: profile\n                };\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/live.js":"'use strict';\n\nexports = module.exports = function (options) {\n\n    return {\n        protocol: 'oauth2',\n        useParamsAuth: true,\n        auth: 'https://login.live.com/oauth20_authorize.srf',\n        token: 'https://login.live.com/oauth20_token.srf',\n        scope: ['wl.basic', 'wl.emails'],\n        profile: function (credentials, params, get, callback) {\n\n            get('https://apis.live.net/v5.0/me', null, (profile) => {\n\n                credentials.profile = {\n                    id: profile.id,\n                    username: profile.username,\n                    displayName: profile.name,\n                    name: {\n                        first: profile.first_name,\n                        last: profile.last_name\n                    },\n                    email: profile.emails && (profile.emails.preferred || profile.emails.account),\n                    raw: profile\n                };\n\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/medium.js":"'use strict';\n\nexports = module.exports = function (options) {\n\n    return {\n        protocol: 'oauth2',\n        useParamsAuth: true,\n        auth: 'https://medium.com/m/oauth/authorize',\n        token: 'https://medium.com/v1/tokens',\n        scope: ['basicProfile'],\n        scopeSeparator: ',',\n        headers: { 'User-Agent': 'hapi-bell-medium' },\n        profile: function (credentials, params, get, callback) {\n\n            get('https://api.medium.com/v1/me', null, (profile) => {\n\n                credentials.profile = {\n                    id: profile.data.id,\n                    username: profile.data.username,\n                    displayName: profile.data.name,\n                    raw: profile.data\n                };\n\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/meetup.js":"'use strict';\n\nexports = module.exports = function (options) {\n\n    return {\n        protocol: 'oauth2',\n        useParamsAuth: true,\n        auth: 'https://secure.meetup.com/oauth2/authorize',\n        token: 'https://secure.meetup.com/oauth2/access',\n        scope: ['basic'],\n        headers: { 'User-Agent': 'hapi-bell-meetup' },\n        profile: function (credentials, params, get, callback) {\n\n            get('https://api.meetup.com/2/member/self', {}, (profile) => {\n\n                credentials.profile = profile;\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/nest.js":"'use strict';\n\nexports = module.exports = function (options) {\n\n    // According to the official docs, no user data is available via the Nest\n    // OAuth service. Therefore, there is no `profile`.\n\n    return {\n        protocol: 'oauth2',\n        useParamsAuth: true,\n        auth: 'https://home.nest.com/login/oauth2',\n        token: 'https://api.home.nest.com/oauth2/access_token'\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/office365.js":"'use strict';\n\nexports = module.exports = function (options) {\n\n    return {\n        protocol: 'oauth2',\n        useParamsAuth: true,\n        auth: 'https://login.microsoftonline.com/common/oauth2/v2.0/authorize',\n        token: 'https://login.microsoftonline.com/common/oauth2/v2.0/token',\n        scope: ['openid','offline_access', 'profile'],\n        profile: function (credentials, params, get, reply) {\n\n            get('https://outlook.office.com/api/v2.0/me', null, (profile) => {\n\n                credentials.profile = {\n                    id: profile.Id,\n                    displayName: profile.DisplayName,\n                    email: profile.EmailAddress,\n                    raw: profile\n                };\n                return reply();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/okta.js":"'use strict';\n\n// Load modules\nconst Joi = require('joi');\nconst Hoek = require('hoek');\n\n// Declare internals\n\nconst internals = {\n    schema: Joi.object({\n        uri: Joi.string().uri().required()\n    }).required()\n};\n\nexports = module.exports = function (options) {\n\n    const results = Joi.validate(options, internals.schema);\n    Hoek.assert(!results.error, results.error);\n    const settings = results.value;\n\n    return {\n        protocol: 'oauth2',\n        useParamsAuth: true,\n        auth: settings.uri + '/oauth2/v1/authorize',\n        token: settings.uri + '/oauth2/v1/token',\n        scope: ['openid', 'email', 'offline_access'],\n        profile: function (credentials, params, get, callback) {\n\n            get(settings.uri + '/oauth2/v1/userinfo', null, (profile) => {\n\n                credentials.profile = {\n                    id: profile.sub,\n                    username: profile.email,\n                    displayName: profile.nickname,\n                    firstName: profile.given_name,\n                    lastName: profile.family_name,\n                    email: profile.email,\n                    raw: profile\n                };\n\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/phabricator.js":"'use strict';\n\n// Load modules\nconst Joi = require('joi');\nconst Hoek = require('hoek');\n\n// Declare internals\n\nconst internals = {\n    schema: Joi.object({\n        uri: Joi.string().uri().required()\n    }).required()\n};\n\n\nexports = module.exports = function (options) {\n\n    const results = Joi.validate(options, internals.schema);\n\n    Hoek.assert(!results.error, results.error);\n\n    const settings = results.value;\n\n    return {\n        protocol: 'oauth2',\n        useParamsAuth: true,\n        auth: settings.uri + '/oauthserver/auth/',\n        token: settings.uri + '/oauthserver/token/',\n        scope: ['whoami'],\n        scopeSeparator: ',',\n        profile: function (credentials, params, get, callback) {\n\n            const query = {\n                access_token: credentials.token\n            };\n\n            get(settings.uri + '/api/user.whoami', query, (profile) => {\n\n                credentials.profile = {\n                    id: profile.result.phid,\n                    username: profile.result.userName,\n                    displayName: profile.result.realName,\n                    email: profile.result.primaryEmail,\n                    raw: profile\n                };\n\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/pingfed.js":"'use strict';\n\nexports = module.exports = function (options) {\n\n    options = options || {};\n\n    const uri = options.uri || 'https://login-dev.ext.hpe.com';\n\n    return {\n        protocol: 'oauth2',\n        auth: uri + '/as/authorization.oauth2',\n        token: uri + '/as/token.oauth2',\n        scope: ['openid','email'],\n        scopeSeparator: ' ',\n        useParamsAuth: true,\n        profile: function (credentials, params, get, callback) {\n\n            const userUrl = uri + '/idp/userinfo.openid';\n\n            get(userUrl, null, (profile) => {\n\n                credentials.profile = {\n                    id: profile.sub,\n                    username: profile.email,\n                    displayName: profile.email,\n                    email: profile.email,\n                    raw: profile\n                };\n\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/pinterest.js":"'use strict';\n\nexports = module.exports = function (options) {\n\n    return {\n        name: 'pinterest',\n        protocol: 'oauth2',\n        auth: 'https://api.pinterest.com/oauth/',\n        token: 'https://api.pinterest.com/v1/oauth/token',\n        useParamsAuth: true,\n        scope: ['read_public', 'write_public', 'read_relationships', 'write_relationships'],\n        scopeSeparator: ',',\n        profile: function (credentials, params, get, callback) {\n\n            const query = {\n                fields: 'id,username,first_name,last_name,bio,created_at,counts,image'\n            };\n\n            get('https://api.pinterest.com/v1/me/', query, (profile) => {\n\n                credentials.profile = {\n                    id: profile.data.id,\n                    username: profile.data.username,\n                    name: {\n                        first: profile.data.first_name,\n                        last: profile.data.last_name\n                    },\n                    raw: profile\n                };\n\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/reddit.js":"'use strict';\n\nexports = module.exports = function (options) {\n\n    return {\n        protocol: 'oauth2',\n        useParamsAuth: false,\n        auth: 'https://www.reddit.com/api/v1/authorize',\n        token: 'https://www.reddit.com/api/v1/access_token',\n        scope: ['identity'], // minimal scope to request\n        scopeSeparator: ' ',\n        headers: { 'User-Agent': 'hapi-bell-reddit' },\n        profile: function (credentials, params, get, callback) {\n\n            const queryOptions = {\n                access_token: credentials.token,\n                client_id: this.clientId\n            };\n\n            get('https://oauth.reddit.com/api/v1/me', queryOptions, (profile) => {\n\n                credentials.profile = profile;\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/salesforce.js":"'use strict';\n\nexports = module.exports = function (options) {\n\n    options = options || {};\n\n    const uri = options.uri || 'https://login.salesforce.com';\n\n    return {\n        protocol: 'oauth2',\n        auth: uri + '/services/oauth2/authorize',\n        token: uri + '/services/oauth2/token',\n        useParamsAuth: true,\n        profile: function (credentials, params, get, callback) {\n\n            const userUrl = params.id;\n\n            get(userUrl, null, (profile) => {\n\n                credentials.profile = {\n                    id: profile.user_id,\n                    username: profile.username,\n                    displayName: profile.display_name,\n                    firstName: profile.first_name,\n                    lastName: profile.last_name,\n                    email: profile.email,\n                    raw: profile\n                };\n\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/slack.js":"'use strict';\n\nconst uri = 'https://slack.com';\n\nexports = module.exports = function slackProvider(options) {\n    // Set defaults in case options are not set\n    options = options || {};\n    return {\n        protocol: 'oauth2',\n        auth: `${uri}/oauth/authorize`,\n        token: `${uri}/api/oauth.access`,\n        // This is the bare minimum scope required to identify the user\n        scope: ['identify'],\n        profile: (credentials, params, get, callback) => {\n\n            credentials.profile = {\n                access_token: params.access_token,\n                scope: params.scope\n            };\n            // If `extendedProfile` is set to `false`, just return immediately.\n            // `access_token` on `credentials.profile` can now be used to call Slack methods.\n            if (options.extendedProfile === false) {\n                return callback();\n            }\n            // If `extendedProfile` is true, get information that identifies the user.\n            // Call the `auth.test` Slack method, providing the `access_token` as `token`.\n            const query = {\n                token: params.access_token\n            };\n            return get(`${uri}/api/auth.test`, query, (profile) => {\n\n                credentials.profile.user_id = profile.user_id; // Slack User ID\n                credentials.profile.user = profile.user; // Slack User Screen Name\n                credentials.profile.raw = profile; // Raw Profile\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/spotify.js":"'use strict';\n\nexports = module.exports = function (options) {\n\n    options = options || {};\n\n    const uri = options.uri || 'https://accounts.spotify.com';\n    const user = options.uri ? options.uri + '/v1/me' : 'https://api.spotify.com/v1/me';\n\n    return {\n        protocol: 'oauth2',\n        useParamsAuth: true,\n        auth: uri + '/authorize',\n        token: uri + '/api/token',\n        scope: ['user-read-email'],\n        scopeSeparator: ',',\n        headers: { 'User-Agent': 'hapi-bell-spotify' },\n        profile: function (credentials, params, get, callback) {\n\n            get(user, null, (profile) => {\n\n                credentials.profile = {\n                    id: profile.id,\n                    username: profile.id,\n                    displayName: profile.display_name,\n                    email: profile.email,\n                    raw: profile\n                };\n\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/tumblr.js":"'use strict';\n\nexports = module.exports = function (options) {\n\n    return {\n        protocol: 'oauth',\n        signatureMethod: 'HMAC-SHA1',\n        temporary: 'https://www.tumblr.com/oauth/request_token',\n        auth: 'https://www.tumblr.com/oauth/authorize',\n        token: 'https://www.tumblr.com/oauth/access_token',\n        profile: function (credentials, params, get, callback) {\n\n            get('https://api.tumblr.com/v2/user/info', {}, (profile) => {\n\n                credentials.profile = {\n                    username: profile.response.user.name,\n                    raw: profile.response.user\n                };\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/twitch.js":"'use strict';\n\nexports = module.exports = function (options) {\n\n    return {\n        protocol: 'oauth2',\n        useParamsAuth: true,\n        auth: 'https://api.twitch.tv/kraken/oauth2/authorize',\n        token: 'https://api.twitch.tv/kraken/oauth2/token',\n        scope: ['user_read'],\n        scopeSeparator: ' ',\n        profile: function (credentials, params, get, callback) {\n\n            const queryOptions = {\n                oauth_token: params.access_token\n            };\n\n            get('https://api.twitch.tv/kraken/user', queryOptions, (profile) => {\n\n                credentials.profile = profile;\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/twitter.js":"'use strict';\n\nconst Hoek = require('hoek');\n\nexports = module.exports = function (options) {\n\n    const defaults = {\n        extendedProfile: true,\n        getMethod: 'users/show'\n    };\n    const settings = Hoek.applyToDefaults(defaults, options || {});\n\n    return {\n        protocol: 'oauth',\n        signatureMethod: 'HMAC-SHA1',\n        temporary: 'https://api.twitter.com/oauth/request_token',\n        auth: 'https://api.twitter.com/oauth/authenticate',\n        token: 'https://api.twitter.com/oauth/access_token',\n        profile: function (credentials, params, get, callback) {\n\n            credentials.profile = {\n                id: params.user_id,\n                username: params.screen_name\n            };\n\n            if (settings.extendedProfile === false) {      // Defaults to true\n                return callback();\n            }\n\n            const paramDefaults = {\n                user_id: params.user_id\n            };\n            const getParams = Hoek.applyToDefaults(paramDefaults, settings.getParams || {});\n\n            get(`https://api.twitter.com/1.1/${settings.getMethod}.json`, getParams, (profile) => {\n\n                credentials.profile.displayName = profile.name;\n                credentials.profile.raw = profile;\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/vk.js":"'use strict';\n\nexports = module.exports = function (options) {\n\n    return {\n        protocol: 'oauth2',\n        useParamsAuth: true,\n        auth: 'https://oauth.vk.com/authorize',\n        token: 'https://oauth.vk.com/access_token',\n        profile: function (credentials, params, get, callback) {\n\n            const query = {\n                uids: params.user_id,\n                access_token: params.access_token\n            };\n\n            get('https://api.vk.com/method/users.get', query, (data) => {\n\n                const profile = data.response[0];\n                credentials.profile = {\n                    id: profile.uid,\n                    displayName: profile.first_name + ' ' + profile.last_name,\n                    name: {\n                        first: profile.first_name,\n                        last: profile.last_name\n                    },\n                    raw: profile\n                };\n\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/wordpress.js":"'use strict';\n\nconst Crypto = require('crypto');\n\nexports = module.exports = function () {\n\n    const baseUrl = 'https://public-api.wordpress.com/';\n\n    return {\n        protocol: 'oauth2',\n        useParamsAuth: true,\n        auth: `${baseUrl}oauth2/authorize`,\n        token: `${baseUrl}oauth2/token`,\n        scope: ['global'],\n        profile: function (credentials, params, get, callback) {\n\n            const query = {\n                format: 'json',\n                token: credentials.token,\n                appsecret_proof: Crypto.createHmac('sha256', this.clientSecret).update(credentials.token).digest('hex')\n            };\n\n            credentials.profile = {};\n\n            get(`${baseUrl}rest/v1.1/me`, query, (profile) => {\n\n                credentials.profile.id = profile.ID;\n                credentials.profile.username = profile.username;\n                credentials.profile.displayName = profile.display_name;\n                credentials.profile.raw = profile;\n                return callback();\n            });\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-bell/node_modules/bell/lib/providers/yahoo.js":"'use strict';\n\nexports = module.exports = function (options) {\n\n    return {\n        protocol: 'oauth',\n        signatureMethod: 'HMAC-SHA1',\n        temporary: 'https://api.login.yahoo.com/oauth/v2/get_request_token',\n        auth: 'https://api.login.yahoo.com/oauth/v2/request_auth',\n        token: 'https://api.login.yahoo.com/oauth/v2/get_token',\n        profile: function (credentials, params, get, callback) {\n\n            get('https://social.yahooapis.com/v1/user/' + params.xoauth_yahoo_guid + '/profile', { format: 'json' }, (profile) => {\n\n                credentials.profile = {\n                    id: profile.profile.guid,\n                    displayName: profile.profile.givenName + ' ' + profile.profile.familyName,\n                    name: {\n                        first: profile.profile.givenName,\n                        last: profile.profile.familyName\n                    },\n                    raw: profile\n                };\n\n                return callback();\n            });\n        }\n    };\n};\n"}